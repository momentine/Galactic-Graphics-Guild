#version 450 core

layout(vertices = 3) out;

in vec4 worldspace_position[];
in vec3 worldspace_normal[];
in mat4 pvm[];

out vec4 worldspace_position2[];
out vec3 worldspace_normal2[];
out mat4 pvm2[];

uniform float tesParam;
uniform float maxTessLevel; // Maximum tessellation level
uniform float cameraDistanceFactor; // Factor for adjusting tessellation based on camera distance

void main() {
    // Pass through vertex positions
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

    // Pass through normals for later use
    worldspace_position2[gl_InvocationID] = worldspace_position[gl_InvocationID];
    worldspace_normal2[gl_InvocationID] = worldspace_normal[gl_InvocationID];
    pvm2[gl_InvocationID] = pvm[gl_InvocationID];

    // Calculate tessellation level based on distance from camera
    float distance = length(cameraDistanceFactor * gl_in[gl_InvocationID].gl_Position.xyz);
    float tessLevel = mix(maxTessLevel, 1.0, distance / maxTessLevel);

    gl_TessLevelOuter[0] = tessLevel;
    gl_TessLevelOuter[1] = tessLevel;
    gl_TessLevelOuter[2] = tessLevel;
    gl_TessLevelInner[0] = tessLevel;
}
