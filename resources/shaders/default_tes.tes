#version 450 core

layout(triangles, equal_spacing, ccw) in;

uniform mat4 modelMatrix;         // Model matrix
uniform mat4 normalMatrix;        // Normal matrix for correct normal transformations
uniform sampler2D displacementMap; // Displacement map for adding surface detail
uniform float displacementScale;   // Scale factor for displacement

in vec4 worldspace_position2[];
in vec3 worldspace_normal2[];
in vec2 texcoord2[];               // Texture coordinates for displacement mapping
in mat4 pvm2[];

out vec4 worldspace_position;
out vec3 worldspace_normal;
out vec2 texcoord;                 // Pass texture coordinate to fragment shader

void main() {
    // Calculate texture coordinates for displacement mapping
    texcoord = gl_TessCoord.x * texcoord2[0] +
               gl_TessCoord.y * texcoord2[1] +
               gl_TessCoord.z * texcoord2[2];

    // Sample the displacement map
    float displacement = texture(displacementMap, texcoord).r * displacementScale;

    // Interpolate vertex positions and apply displacement
    vec3 position = gl_TessCoord.x * gl_in[0].gl_Position.xyz +
                    gl_TessCoord.y * gl_in[1].gl_Position.xyz +
                    gl_TessCoord.z * gl_in[2].gl_Position.xyz;

    vec4 worldPosition = modelMatrix * vec4(position, 1.0);
    vec3 normal = normalize(gl_TessCoord.x * worldspace_normal2[0] +
                            gl_TessCoord.y * worldspace_normal2[1] +
                            gl_TessCoord.z * worldspace_normal2[2]);

    // Apply displacement along the normal
    worldPosition.xyz += normal * displacement;

    // Transform the normal using the normal matrix
    worldspace_normal = normalize((normalMatrix * vec4(normal, 0.0)).xyz);

    // Pass world position to the fragment shader
    worldspace_position = worldPosition;

    // Project the vertex to screen space
    gl_Position = pvm2[0] * worldPosition;
}
